@testset "constructors" begin
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int}(0, Element{0.0, Float64}([])))
        res = Fiber(Finch.DenseLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(0, Element{0.0, Float64}([])))
        res = Fiber(Finch.DenseLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int, Int}(0, [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseListLevel(0, [1, 1], Int[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(0, [1, 1], Int[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(0, [1, 1], Int[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int}(0, [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseListLevel{Int16}(0, [1, 1], Int16[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(0, [1, 1], Int16[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(0, [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(0, Int16[1, 1], Int16[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel constructors" begin
        ref = Fiber(SparseListDiff{Int, Int}(0, [1, 1], [0x00], [0], Element{0.0, Float64}([0.0])))
        res = Fiber(Finch.SparseListDiffLevel(0, [1, 1], UInt8[0x00], [0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel(0, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel(Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(0, [1, 1], UInt8[0x00], [0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(0, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(0, [1, 1], UInt8[0x00], [0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(0, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int}(0, [1, 1], [0x00], [0], Element{0.0, Float64}([0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16}(0, [1, 1], UInt8[0x00], Int16[0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16}(0, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16}(Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(0, [1, 1], UInt8[0x00], Int16[0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(0, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int16}(0, [1, 1], [0x00], [0], Element{0.0, Float64}([0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(0, Int16[1, 1], UInt8[0x00], Int16[0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(0, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int, Int}(0, [1, 1], [], [1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseVBLLevel(0, [1, 1], Int[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(0, [1, 1], Int[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(0, [1, 1], Int[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int}(0, [1, 1], [], [1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseVBLLevel{Int16}(0, [1, 1], Int16[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(0, [1, 1], Int16[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(0, [1, 1], [], [1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(0, Int16[1, 1], Int16[], Int16[1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int, Int}(0, [1, 1], [], [], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseBytemapLevel(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int}(0, [1, 1], [], [], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseBytemapLevel{Int16}(0, [1, 1], Bool[], Tuple{Int, Int16}[], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(0, [1, 1], Bool[], Tuple{Int, Int16}[], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(0, [1, 1], [], [], Base.RefValue{Int16}(0), Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(0, Int16[1, 1], Bool[], Tuple{Int16, Int16}[], Base.RefValue{Int16}(0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.DenseLevel(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.DenseLevel{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int, Int}(4, [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseListLevel(4, [1, 1], Int[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(4, [1, 1], Int[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(4, [1, 1], Int[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int}(4, [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseListLevel{Int16}(4, [1, 1], Int16[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(4, [1, 1], Int16[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(4, [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(4, Int16[1, 1], Int16[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel constructors" begin
        ref = Fiber(SparseListDiff{Int, Int}(4, [1, 1], [0x00], [0], Element{0.0, Float64}([0.0])))
        res = Fiber(Finch.SparseListDiffLevel(4, [1, 1], UInt8[0x00], [0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel(4, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(4, [1, 1], UInt8[0x00], [0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(4, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(4, [1, 1], UInt8[0x00], [0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(4, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int}(4, [1, 1], [0x00], [0], Element{0.0, Float64}([0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16}(4, [1, 1], UInt8[0x00], Int16[0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16}(4, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(4, [1, 1], UInt8[0x00], Int16[0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(4, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int16}(4, [1, 1], [0x00], [0], Element{0.0, Float64}([0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(4, Int16[1, 1], UInt8[0x00], Int16[0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(4, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int, Int}(4, [1, 1], [], [1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseVBLLevel(4, [1, 1], Int[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(4, [1, 1], Int[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(4, [1, 1], Int[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int}(4, [1, 1], [], [1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseVBLLevel{Int16}(4, [1, 1], Int16[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(4, [1, 1], Int16[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(4, [1, 1], [], [1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(4, Int16[1, 1], Int16[], Int16[1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int, Int}(4, [1, 1], [0, 0, 0, 0], [], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int}(4, [1, 1], [0, 0, 0, 0], [], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int16}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int16}[], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int16}[], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(4, [1, 1], [0, 0, 0, 0], [], Base.RefValue{Int16}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(4, Int16[1, 1], Bool[0, 0, 0, 0], Tuple{Int16, Int16}[], Base.RefValue{Int16}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int}(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        res = Fiber(Finch.DenseLevel(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        res = Fiber(Finch.DenseLevel{Int16}(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int, Int}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])))
        res = Fiber(Finch.SparseListLevel(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])))
        res = Fiber(Finch.SparseListLevel{Int16}(6, [1, 3], Int16[2, 4], Element{0.0, Float64}([1.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(6, [1, 3], Int16[2, 4], Element{0.0, Float64}([1.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])))
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(6, Int16[1, 3], Int16[2, 4], Element{0.0, Float64}([1.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel constructors" begin
        ref = Fiber(SparseListDiff{Int, Int}(6, [1, 3], [0x02, 0x02, 0x00], [4], Element{0.0, Float64}([1.0, 1.0, 0.0])))
        res = Fiber(Finch.SparseListDiffLevel(6, [1, 3], UInt8[0x02, 0x02, 0x00], [4], Element{0.0, Float64}([1.0, 1.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(6, [1, 3], UInt8[0x02, 0x02, 0x00], [4], Element{0.0, Float64}([1.0, 1.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(6, [1, 3], UInt8[0x02, 0x02, 0x00], [4], Element{0.0, Float64}([1.0, 1.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int}(6, [1, 3], [0x02, 0x02, 0x00], [4], Element{0.0, Float64}([1.0, 1.0, 0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16}(6, [1, 3], UInt8[0x02, 0x02, 0x00], Int16[4], Element{0.0, Float64}([1.0, 1.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(6, [1, 3], UInt8[0x02, 0x02, 0x00], Int16[4], Element{0.0, Float64}([1.0, 1.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int16}(6, [1, 3], [0x02, 0x02, 0x00], [4], Element{0.0, Float64}([1.0, 1.0, 0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(6, Int16[1, 3], UInt8[0x02, 0x02, 0x00], Int16[4], Element{0.0, Float64}([1.0, 1.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int, Int}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])))
        res = Fiber(Finch.SparseVBLLevel(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])))
        res = Fiber(Finch.SparseVBLLevel{Int16}(6, [1, 3], Int16[2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(6, [1, 3], Int16[2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])))
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(6, Int16[1, 3], Int16[2, 4], Int16[1, 2, 3], Element{0.0, Float64}([1.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int, Int}(6, [1, 3], [0, 1, 0, 1, 0, 0], [(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], [(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], [(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], [(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int}(6, [1, 3], [0, 1, 0, 1, 0, 0], [(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int16}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], Tuple{Int, Int16}[(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], Tuple{Int, Int16}[(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(6, [1, 3], [0, 1, 0, 1, 0, 0], [(1, 2), (1, 4)], Base.RefValue{Int16}(2), Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(6, Int16[1, 3], Bool[0, 1, 0, 1, 0, 0], Tuple{Int16, Int16}[(1, 2), (1, 4)], Base.RefValue{Int16}(2), Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int}(0, Element{0.0, Float64}([])))
        res = Fiber(Finch.DenseLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(0, Element{0.0, Float64}([])))
        res = Fiber(Finch.DenseLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int, Int}(0, [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseListLevel(0, [1, 1], Int[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(0, [1, 1], Int[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(0, [1, 1], Int[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int}(0, [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseListLevel{Int16}(0, [1, 1], Int16[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(0, [1, 1], Int16[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(0, [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(0, Int16[1, 1], Int16[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel constructors" begin
        ref = Fiber(SparseListDiff{Int, Int}(0, [1, 1], [0x00], [0], Element{0.0, Float64}([0.0])))
        res = Fiber(Finch.SparseListDiffLevel(0, [1, 1], UInt8[0x00], [0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel(0, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel(Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(0, [1, 1], UInt8[0x00], [0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(0, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(0, [1, 1], UInt8[0x00], [0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(0, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int}(0, [1, 1], [0x00], [0], Element{0.0, Float64}([0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16}(0, [1, 1], UInt8[0x00], Int16[0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16}(0, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16}(Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(0, [1, 1], UInt8[0x00], Int16[0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(0, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int16}(0, [1, 1], [0x00], [0], Element{0.0, Float64}([0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(0, Int16[1, 1], UInt8[0x00], Int16[0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(0, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int, Int}(0, [1, 1], [], [1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseVBLLevel(0, [1, 1], Int[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(0, [1, 1], Int[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(0, [1, 1], Int[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int}(0, [1, 1], [], [1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseVBLLevel{Int16}(0, [1, 1], Int16[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(0, [1, 1], Int16[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(0, [1, 1], [], [1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(0, Int16[1, 1], Int16[], Int16[1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int, Int}(0, [1, 1], [], [], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseBytemapLevel(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int}(0, [1, 1], [], [], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseBytemapLevel{Int16}(0, [1, 1], Bool[], Tuple{Int, Int16}[], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(0, [1, 1], Bool[], Tuple{Int, Int16}[], Base.RefValue{Int}(0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(0, [1, 1], [], [], Base.RefValue{Int16}(0), Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(0, Int16[1, 1], Bool[], Tuple{Int16, Int16}[], Base.RefValue{Int16}(0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.DenseLevel(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.DenseLevel{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int, Int}(4, [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseListLevel(4, [1, 1], Int[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(4, [1, 1], Int[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(4, [1, 1], Int[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int}(4, [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseListLevel{Int16}(4, [1, 1], Int16[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(4, [1, 1], Int16[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(4, [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(4, Int16[1, 1], Int16[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel constructors" begin
        ref = Fiber(SparseListDiff{Int, Int}(4, [1, 1], [0x00], [0], Element{0.0, Float64}([0.0])))
        res = Fiber(Finch.SparseListDiffLevel(4, [1, 1], UInt8[0x00], [0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel(4, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(4, [1, 1], UInt8[0x00], [0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(4, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(4, [1, 1], UInt8[0x00], [0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(4, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int}(4, [1, 1], [0x00], [0], Element{0.0, Float64}([0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16}(4, [1, 1], UInt8[0x00], Int16[0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16}(4, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(4, [1, 1], UInt8[0x00], Int16[0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(4, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int16}(4, [1, 1], [0x00], [0], Element{0.0, Float64}([0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(4, Int16[1, 1], UInt8[0x00], Int16[0], Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(4, Element{0.0, Float64}([0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int, Int}(4, [1, 1], [], [1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseVBLLevel(4, [1, 1], Int[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(4, [1, 1], Int[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(4, [1, 1], Int[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int}(4, [1, 1], [], [1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseVBLLevel{Int16}(4, [1, 1], Int16[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(4, [1, 1], Int16[], [1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(4, [1, 1], [], [1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(4, Int16[1, 1], Int16[], Int16[1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int, Int}(4, [1, 1], [0, 0, 0, 0], [], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int}(4, [1, 1], [0, 0, 0, 0], [], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int16}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int16}[], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int16}[], Base.RefValue{Int}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(4, [1, 1], [0, 0, 0, 0], [], Base.RefValue{Int16}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(4, Int16[1, 1], Bool[0, 0, 0, 0], Tuple{Int16, Int16}[], Base.RefValue{Int16}(0), Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int}(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        res = Fiber(Finch.DenseLevel(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        res = Fiber(Finch.DenseLevel{Int16}(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int, Int}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        res = Fiber(Finch.SparseListLevel(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        res = Fiber(Finch.SparseListLevel{Int16}(6, [1, 5], Int16[2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(6, [1, 5], Int16[2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(6, Int16[1, 5], Int16[2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel constructors" begin
        ref = Fiber(SparseListDiff{Int, Int}(6, [1, 5], [0x02, 0x01, 0x02, 0x01, 0x00], [6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0, 0.0])))
        res = Fiber(Finch.SparseListDiffLevel(6, [1, 5], UInt8[0x02, 0x01, 0x02, 0x01, 0x00], [6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(6, [1, 5], UInt8[0x02, 0x01, 0x02, 0x01, 0x00], [6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(6, [1, 5], UInt8[0x02, 0x01, 0x02, 0x01, 0x00], [6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int}(6, [1, 5], [0x02, 0x01, 0x02, 0x01, 0x00], [6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0, 0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16}(6, [1, 5], UInt8[0x02, 0x01, 0x02, 0x01, 0x00], Int16[6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(6, [1, 5], UInt8[0x02, 0x01, 0x02, 0x01, 0x00], Int16[6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int16}(6, [1, 5], [0x02, 0x01, 0x02, 0x01, 0x00], [6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0, 0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(6, Int16[1, 5], UInt8[0x02, 0x01, 0x02, 0x01, 0x00], Int16[6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int, Int}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        res = Fiber(Finch.SparseVBLLevel(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        res = Fiber(Finch.SparseVBLLevel{Int16}(6, [1, 3], Int16[3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(6, [1, 3], Int16[3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(6, Int16[1, 3], Int16[3, 6], Int16[1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int, Int}(6, [1, 5], [0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        res = Fiber(Finch.SparseBytemapLevel(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int}(6, [1, 5], [0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int16}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], Tuple{Int, Int16}[(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], Tuple{Int, Int16}[(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(6, [1, 5], [0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int16}(4), Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(6, Int16[1, 5], Bool[0, 1, 1, 0, 1, 1], Tuple{Int16, Int16}[(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int16}(4), Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int, Int}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        res = Fiber(Finch.SparseListLevel(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        res = Fiber(Finch.SparseListLevel{Int16}(1111, [1, 5], Int16[2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int}(1111, [1, 5], Int16[2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(1111, Int16[1, 5], Int16[2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel constructors" begin
        ref = Fiber(SparseListDiff{Int, Int}(1111, [1, 7], [0x02, 0x01, 0xff, 0xff, 0x2a, 0x6f, 0x00], [666], Element{0.0, Float64}([20.0, 30.0, 0.0, 0.0, 5550.0, 6660.0, 0.0])))
        res = Fiber(Finch.SparseListDiffLevel(1111, [1, 7], UInt8[0x02, 0x01, 0xff, 0xff, 0x2a, 0x6f, 0x00], [666], Element{0.0, Float64}([20.0, 30.0, 0.0, 0.0, 5550.0, 6660.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int}(1111, [1, 7], UInt8[0x02, 0x01, 0xff, 0xff, 0x2a, 0x6f, 0x00], [666], Element{0.0, Float64}([20.0, 30.0, 0.0, 0.0, 5550.0, 6660.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int, Int}(1111, [1, 7], UInt8[0x02, 0x01, 0xff, 0xff, 0x2a, 0x6f, 0x00], [666], Element{0.0, Float64}([20.0, 30.0, 0.0, 0.0, 5550.0, 6660.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int}(1111, [1, 7], [0x02, 0x01, 0xff, 0xff, 0x2a, 0x6f, 0x00], [666], Element{0.0, Float64}([20.0, 30.0, 0.0, 0.0, 5550.0, 6660.0, 0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16}(1111, [1, 7], UInt8[0x02, 0x01, 0xff, 0xff, 0x2a, 0x6f, 0x00], Int16[666], Element{0.0, Float64}([20.0, 30.0, 0.0, 0.0, 5550.0, 6660.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int}(1111, [1, 7], UInt8[0x02, 0x01, 0xff, 0xff, 0x2a, 0x6f, 0x00], Int16[666], Element{0.0, Float64}([20.0, 30.0, 0.0, 0.0, 5550.0, 6660.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListDiffLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseListDiff{Int16, Int16}(1111, [1, 7], [0x02, 0x01, 0xff, 0xff, 0x2a, 0x6f, 0x00], [666], Element{0.0, Float64}([20.0, 30.0, 0.0, 0.0, 5550.0, 6660.0, 0.0])))
        res = Fiber(Finch.SparseListDiffLevel{Int16, Int16}(1111, Int16[1, 7], UInt8[0x02, 0x01, 0xff, 0xff, 0x2a, 0x6f, 0x00], Int16[666], Element{0.0, Float64}([20.0, 30.0, 0.0, 0.0, 5550.0, 6660.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int, Int}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        res = Fiber(Finch.SparseVBLLevel(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        res = Fiber(Finch.SparseVBLLevel{Int16}(1111, [1, 4], Int16[3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int}(1111, [1, 4], Int16[3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(1111, Int16[1, 4], Int16[3, 555, 666], Int16[1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int, Int}(1111, [1, 5], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1, 2), (1, 3), (1, 555), (1, 666)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel(1111, [1, 5], Bool[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1, 2), (1, 3), (1, 555), (1, 666)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(1111, [1, 5], Bool[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1, 2), (1, 3), (1, 555), (1, 666)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(1111, [1, 5], Bool[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1, 2), (1, 3), (1, 555), (1, 666)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int}(1111, [1, 5], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1, 2), (1, 3), (1, 555), (1, 666)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int16}(1111, [1, 5], Bool[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Tuple{Int, Int16}[(1, 2), (1, 3), (1, 555), (1, 666)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int}(1111, [1, 5], Bool[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Tuple{Int, Int16}[(1, 2), (1, 3), (1, 555), (1, 666)], Base.RefValue{Int}(4), Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(1111, [1, 5], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1, 2), (1, 3), (1, 555), (1, 666)], Base.RefValue{Int16}(4), Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(1111, Int16[1, 5], Bool[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Tuple{Int16, Int16}[(1, 2), (1, 3), (1, 555), (1, 666)], Base.RefValue{Int16}(4), Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int}, Int}((0,), (Int[], ), [1, 1], Element{false, Bool}([])))
        res = Fiber(Finch.SparseCooLevel{1}((0,), (Int[],), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((0,), (Int[],), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, Int}((0,), (Int16[], ), [1, 1], Element{false, Bool}([])))
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((0,), (Int16[],), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int}, Int}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int, Int}, Int}((0, 0), (Int[], Int[], ), [1, 1], Element{false, Bool}([])))
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), (Int[], Int[]), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((0, 0), (Int[], Int[]), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, Int}((0, 0), (Int16[], Int16[], ), [1, 1], Element{false, Bool}([])))
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((0, 0), (Int16[], Int16[]), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int, Int}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), (Int[], Int[], Int[], ), [1, 1], Element{false, Bool}([])))
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), (Int[], Int[], Int[]), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), (Int[], Int[], Int[]), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, Int}((0, 0, 0), (Int16[], Int16[], Int16[], ), [1, 1], Element{false, Bool}([])))
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), (Int16[], Int16[], Int16[]), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int}, Int}((4,), (Int[], ), [1, 1], Element{false, Bool}([])))
        res = Fiber(Finch.SparseCooLevel{1}((4,), (Int[],), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((4,), (Int[],), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, Int}((4,), (Int16[], ), [1, 1], Element{false, Bool}([])))
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), (Int16[],), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int}, Int}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int, Int}, Int}((2, 3), (Int[], Int[], ), [1, 1], Element{false, Bool}([])))
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), (Int[], Int[]), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((2, 3), (Int[], Int[]), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, Int}((2, 3), (Int16[], Int16[], ), [1, 1], Element{false, Bool}([])))
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), (Int16[], Int16[]), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int, Int}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), (Int[], Int[], Int[], ), [1, 1], Element{false, Bool}([])))
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), (Int[], Int[], Int[]), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), (Int[], Int[], Int[]), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), (Int16[], Int16[], Int16[], ), [1, 1], Element{false, Bool}([])))
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), (Int16[], Int16[], Int16[]), [1, 1], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int}, Int}((4,), (Int[2], ), [1, 2], Element{false, Bool}([1])))
        res = Fiber(Finch.SparseCooLevel{1}((4,), ([2],), [1, 2], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((4,), ([2],), [1, 2], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, Int}((4,), (Int16[2], ), [1, 2], Element{false, Bool}([1])))
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), (Int16[2],), [1, 2], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int}, Int}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])))
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int16}}, Int}[(1, (2,)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int16}}, Int}[(1, (2,)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int16}}, Int}[(1, (2,)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int, Int}, Int}((2, 3), (Int[2], Int[1], ), [1, 2], Element{false, Bool}([1])))
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), ([2], [1]), [1, 2], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((2, 3), ([2], [1]), [1, 2], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, Int}((2, 3), (Int16[2], Int16[1], ), [1, 2], Element{false, Bool}([1])))
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), (Int16[2], Int16[1]), [1, 2], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int, Int}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])))
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[(1, (2, 1)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[(1, (2, 1)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[(1, (2, 1)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{false, Bool}([1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), (Int[2, 3], Int[2, 2], Int[1, 2], ), [1, 3], Element{false, Bool}([1, 1])))
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), (Int16[2, 3], Int16[2, 2], Int16[1, 2], ), [1, 3], Element{false, Bool}([1, 1])))
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), (Int16[2, 3], Int16[2, 2], Int16[1, 2]), [1, 3], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int}, Int}((0,), (Int[], ), [1, 1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseCooLevel{1}((0,), (Int[],), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((0,), (Int[],), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, Int}((0,), (Int16[], ), [1, 1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((0,), (Int16[],), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int}, Int}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int, Int}, Int}((0, 0), (Int[], Int[], ), [1, 1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), (Int[], Int[]), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((0, 0), (Int[], Int[]), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, Int}((0, 0), (Int16[], Int16[], ), [1, 1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((0, 0), (Int16[], Int16[]), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int, Int}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), (Int[], Int[], Int[], ), [1, 1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), (Int[], Int[], Int[]), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), (Int[], Int[], Int[]), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, Int}((0, 0, 0), (Int16[], Int16[], Int16[], ), [1, 1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), (Int16[], Int16[], Int16[]), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int}, Int}((4,), (Int[], ), [1, 1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseCooLevel{1}((4,), (Int[],), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((4,), (Int[],), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, Int}((4,), (Int16[], ), [1, 1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), (Int16[],), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int}, Int}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int, Int}, Int}((2, 3), (Int[], Int[], ), [1, 1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), (Int[], Int[]), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((2, 3), (Int[], Int[]), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, Int}((2, 3), (Int16[], Int16[], ), [1, 1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), (Int16[], Int16[]), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int, Int}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), (Int[], Int[], Int[], ), [1, 1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), (Int[], Int[], Int[]), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), (Int[], Int[], Int[]), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), (Int16[], Int16[], Int16[], ), [1, 1], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), (Int16[], Int16[], Int16[]), [1, 1], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int}, Int}((4,), (Int[2], ), [1, 2], Element{0.0, Float64}([2.0])))
        res = Fiber(Finch.SparseCooLevel{1}((4,), ([2],), [1, 2], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((4,), ([2],), [1, 2], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, Int}((4,), (Int16[2], ), [1, 2], Element{0.0, Float64}([2.0])))
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), (Int16[2],), [1, 2], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int}, Int}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int16}}, Int}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int16}}, Int}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int, Dict{Tuple{Int, Tuple{Int16}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int16}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int16}}, Int}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int, Int}, Int}((2, 3), (Int[2], Int[1], ), [1, 2], Element{0.0, Float64}([3.0])))
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), ([2], [1]), [1, 2], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((2, 3), ([2], [1]), [1, 2], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, Int}((2, 3), (Int16[2], Int16[1], ), [1, 2], Element{0.0, Float64}([3.0])))
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), (Int16[2], Int16[1]), [1, 2], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int, Int}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int16, Int16}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int16, Int16}}, Int}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), (Int[2, 3], Int[2, 2], Int[1, 2], ), [1, 3], Element{0.0, Float64}([4.0, 5.0])))
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), (Int16[2, 3], Int16[2, 2], Int16[1, 2], ), [1, 3], Element{0.0, Float64}([4.0, 5.0])))
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), (Int16[2, 3], Int16[2, 2], Int16[1, 2]), [1, 3], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int, Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int16, Int16, Int16}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int, Int, Float64}(0, [1, 1], [], []))
        res = Fiber(Finch.RepeatRLELevel{0.0}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int, Float64}(0, [1, 1], [], []))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16}(0, [1, 1], Int16[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int}(0, [1, 1], Int16[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int, Float64}(0, [1, 1], Int16[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16, Int16} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int16, Float64}(0, [1, 1], [], []))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16}(0, Int16[1, 1], Int16[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Float64}(0, Int16[1, 1], Int16[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16, Int16, Any} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int16, Any}(0, [1, 1], [], []))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Any}(0, Int16[1, 1], Int16[], Any[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Any}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int, Int, Float64}(0, [1, 1], [0x00], []))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int, Float64}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int, Float64}(0, [1, 1], [0x00], []))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int, Float64}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16, Int16} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int16, Float64}(0, [1, 1], [0x00], []))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16}(0, Int16[1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Float64}(0, Int16[1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int16, Any}(0, [1, 1], [0x00], []))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any}(0, Int16[1, 1], UInt8[0x00], Any[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int, Int, Float64}(0, [1, 1], [], []))
        res = Fiber(Finch.RepeatRLELevel(0.0, 0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel(0.0, 0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel(0.0))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int, Int, Float64}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int, Float64}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16}(4, [1, 2], Int16[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int}(4, [1, 2], Int16[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int, Float64}(4, [1, 2], Int16[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16, Int16} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int16, Float64}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16}(4, Int16[1, 2], Int16[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Float64}(4, Int16[1, 2], Int16[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16, Int16, Any} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int16, Any}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Any}(4, Int16[1, 2], Int16[4], Any[0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Any}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int, Int, Float64}(4, [1, 2], [0x04, 0x00], [0.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int, Float64}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int, Float64}(4, [1, 2], [0x04, 0x00], [0.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int, Float64}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16, Int16} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int16, Float64}(4, [1, 2], [0x04, 0x00], [0.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16}(4, Int16[1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Float64}(4, Int16[1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int16, Any}(4, [1, 2], [0x04, 0x00], [0.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any}(4, Int16[1, 2], UInt8[0x04, 0x00], Any[0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int, Int, Float64}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel(0.0, 4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel(0.0, 4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int, Int, Float64}(6, [1, 6], [1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0}(6, [1, 6], [1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(6, [1, 6], [1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(6, [1, 6], [1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(6, [1, 6], [1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int, Float64}(6, [1, 6], [1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16}(6, [1, 6], Int16[1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int}(6, [1, 6], Int16[1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int, Float64}(6, [1, 6], Int16[1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16, Int16} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int16, Float64}(6, [1, 6], [1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16}(6, Int16[1, 6], Int16[1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Float64}(6, Int16[1, 6], Int16[1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16, Int16, Any} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int16, Any}(6, [1, 6], [1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Any}(6, Int16[1, 6], Int16[1, 2, 3, 4, 6], Any[0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int, Int, Float64}(6, [1, 6], [0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0}(6, [1, 6], UInt8[0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int}(6, [1, 6], UInt8[0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int}(6, [1, 6], UInt8[0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int, Float64}(6, [1, 6], UInt8[0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int, Float64}(6, [1, 6], [0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16}(6, [1, 6], UInt8[0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int}(6, [1, 6], UInt8[0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int, Float64}(6, [1, 6], UInt8[0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16, Int16} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int16, Float64}(6, [1, 6], [0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16}(6, Int16[1, 6], UInt8[0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Float64}(6, Int16[1, 6], UInt8[0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int16, Any}(6, [1, 6], [0x01, 0x01, 0x01, 0x01, 0x02, 0x00], [0.0, 1.0, 0.0, 1.0, 0.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any}(6, Int16[1, 6], UInt8[0x01, 0x01, 0x01, 0x01, 0x02, 0x00], Any[0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int, Int, Float64}(6, [1, 6], [1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        res = Fiber(Finch.RepeatRLELevel(0.0, 6, [1, 6], [1, 2, 3, 4, 6], [0.0, 1.0, 0.0, 1.0, 0.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int, Int, Float64}(0, [1, 1], [], []))
        res = Fiber(Finch.RepeatRLELevel{0.0}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int, Float64}(0, [1, 1], [], []))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16}(0, [1, 1], Int16[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int}(0, [1, 1], Int16[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int, Float64}(0, [1, 1], Int16[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16, Int16} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int16, Float64}(0, [1, 1], [], []))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16}(0, Int16[1, 1], Int16[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Float64}(0, Int16[1, 1], Int16[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16, Int16, Any} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int16, Any}(0, [1, 1], [], []))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Any}(0, Int16[1, 1], Int16[], Any[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Any}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int, Int, Float64}(0, [1, 1], [0x00], []))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int, Float64}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int, Float64}(0, [1, 1], [0x00], []))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int, Float64}(0, [1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16, Int16} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int16, Float64}(0, [1, 1], [0x00], []))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16}(0, Int16[1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Float64}(0, Int16[1, 1], UInt8[0x00], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int16, Any}(0, [1, 1], [0x00], []))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any}(0, Int16[1, 1], UInt8[0x00], Any[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int, Int, Float64}(0, [1, 1], [], []))
        res = Fiber(Finch.RepeatRLELevel(0.0, 0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel(0.0, 0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel(0.0))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int, Int, Float64}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int, Float64}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16}(4, [1, 2], Int16[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int}(4, [1, 2], Int16[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int, Float64}(4, [1, 2], Int16[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16, Int16} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int16, Float64}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16}(4, Int16[1, 2], Int16[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Float64}(4, Int16[1, 2], Int16[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16, Int16, Any} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int16, Any}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Any}(4, Int16[1, 2], Int16[4], Any[0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Any}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int, Int, Float64}(4, [1, 2], [0x04, 0x00], [0.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int, Float64}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int, Float64}(4, [1, 2], [0x04, 0x00], [0.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int, Float64}(4, [1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16, Int16} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int16, Float64}(4, [1, 2], [0x04, 0x00], [0.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16}(4, Int16[1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Float64}(4, Int16[1, 2], UInt8[0x04, 0x00], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int16, Any}(4, [1, 2], [0x04, 0x00], [0.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any}(4, Int16[1, 2], UInt8[0x04, 0x00], Any[0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int, Int, Float64}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel(0.0, 4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel(0.0, 4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int, Int, Float64}(6, [1, 5], [1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0}(6, [1, 5], [1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(6, [1, 5], [1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(6, [1, 5], [1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(6, [1, 5], [1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int, Float64}(6, [1, 5], [1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16}(6, [1, 5], Int16[1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int}(6, [1, 5], Int16[1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int, Float64}(6, [1, 5], Int16[1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16, Int16} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int16, Float64}(6, [1, 5], [1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16}(6, Int16[1, 5], Int16[1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Float64}(6, Int16[1, 5], Int16[1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int16, Int16, Any} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int16, Int16, Any}(6, [1, 5], [1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int16, Int16, Any}(6, Int16[1, 5], Int16[1, 3, 4, 6], Any[0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int, Int, Float64}(6, [1, 5], [0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0}(6, [1, 5], UInt8[0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int}(6, [1, 5], UInt8[0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int}(6, [1, 5], UInt8[0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int, Int, Float64}(6, [1, 5], UInt8[0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int, Float64}(6, [1, 5], [0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16}(6, [1, 5], UInt8[0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int}(6, [1, 5], UInt8[0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int, Float64}(6, [1, 5], UInt8[0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16, Int16} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int16, Float64}(6, [1, 5], [0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16}(6, Int16[1, 5], UInt8[0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Float64}(6, Int16[1, 5], UInt8[0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any} constructors" begin
        ref = Fiber(RepeatRLEDiff{0.0, Int16, Int16, Any}(6, [1, 5], [0x01, 0x02, 0x01, 0x02, 0x00], [0.0, 2.0, 0.0, 3.0]))
        res = Fiber(Finch.RepeatRLEDiffLevel{0.0, Int16, Int16, Any}(6, Int16[1, 5], UInt8[0x01, 0x02, 0x01, 0x02, 0x00], Any[0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int, Int, Float64}(6, [1, 5], [1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        res = Fiber(Finch.RepeatRLELevel(0.0, 6, [1, 5], [1, 3, 4, 6], [0.0, 2.0, 0.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0, Float64}([0.0]))
        res = Fiber(Finch.ElementLevel{0.0}([0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0, Any}([0.0]))
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0, Float64}([0.0]))
        res = Fiber(Finch.ElementLevel(0.0, [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel(0.0))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0, Float64}([1.0]))
        res = Fiber(Finch.ElementLevel{0.0}([1.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0, Any}([1.0]))
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0, Float64}([1.0]))
        res = Fiber(Finch.ElementLevel(0.0, [1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0, Float64}([0.0]))
        res = Fiber(Finch.ElementLevel{0.0}([0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0, Any}([0.0]))
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0, Float64}([0.0]))
        res = Fiber(Finch.ElementLevel(0.0, [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel(0.0))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0, Float64}([1.0]))
        res = Fiber(Finch.ElementLevel{0.0}([1.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0, Any}([1.0]))
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0, Float64}([1.0]))
        res = Fiber(Finch.ElementLevel(0.0, [1.0]))
        @test isstructequal(res, ref)
    end
end
