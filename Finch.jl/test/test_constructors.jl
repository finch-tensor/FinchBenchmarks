@testset "constructors" begin
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int}(0, Element{0.0}(Float64[])))
        res = Fiber(Finch.DenseLevel(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int8} constructors" begin
        ref = Fiber(Dense{Int8}(0, Element{0.0}(Float64[])))
        res = Fiber(Finch.DenseLevel{Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int}(0, [1, 1], Int[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseListLevel(0, [1, 1], Int[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(0, [1, 1], Int[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(0, [1, 1], Int[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int8} constructors" begin
        ref = Fiber(SparseList{Int8}(0, [1, 1], Int8[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseListLevel{Int8}(0, [1, 1], Int8[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int}(0, [1, 1], Int8[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseList{Int8}(0, Int8[1, 1], Int8[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseListLevel{Int8, Int8}(0, Int8[1, 1], Int8[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int}(0, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseVBLLevel(0, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(0, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(0, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int8} constructors" begin
        ref = Fiber(SparseVBL{Int8}(0, [1, 1], Int8[], [1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseVBLLevel{Int8}(0, [1, 1], Int8[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int}(0, [1, 1], Int8[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseVBL{Int8}(0, Int8[1, 1], Int8[], Int8[1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseVBLLevel{Int8, Int8}(0, Int8[1, 1], Int8[], Int8[1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int}(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseBytemapLevel(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int8} constructors" begin
        ref = Fiber(SparseBytemap{Int8}(0, [1, 1], Bool[], Tuple{Int, Int8}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseBytemapLevel{Int8}(0, [1, 1], Bool[], Tuple{Int, Int8}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int}(0, [1, 1], Bool[], Tuple{Int, Int8}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseBytemap{Int8}(0, Int8[1, 1], Bool[], Tuple{Int8, Int8}[], Base.RefValue{Int8}(0), Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int8}(0, Int8[1, 1], Bool[], Tuple{Int8, Int8}[], Base.RefValue{Int8}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int}(4, Element{0.0}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.DenseLevel(4, Element{0.0}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(4, Element{0.0}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int8} constructors" begin
        ref = Fiber(Dense{Int8}(4, Element{0.0}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.DenseLevel{Int8}(4, Element{0.0}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int}(4, [1, 1], Int[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseListLevel(4, [1, 1], Int[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(4, [1, 1], Int[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(4, [1, 1], Int[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int8} constructors" begin
        ref = Fiber(SparseList{Int8}(4, [1, 1], Int8[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseListLevel{Int8}(4, [1, 1], Int8[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int}(4, [1, 1], Int8[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseList{Int8}(4, Int8[1, 1], Int8[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseListLevel{Int8, Int8}(4, Int8[1, 1], Int8[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int8}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int}(4, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseVBLLevel(4, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(4, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(4, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int8} constructors" begin
        ref = Fiber(SparseVBL{Int8}(4, [1, 1], Int8[], [1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseVBLLevel{Int8}(4, [1, 1], Int8[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int}(4, [1, 1], Int8[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseVBL{Int8}(4, Int8[1, 1], Int8[], Int8[1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseVBLLevel{Int8, Int8}(4, Int8[1, 1], Int8[], Int8[1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int8}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseBytemapLevel(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int8} constructors" begin
        ref = Fiber(SparseBytemap{Int8}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int8}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseBytemapLevel{Int8}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int8}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int8}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseBytemap{Int8}(4, Int8[1, 1], Bool[0, 0, 0, 0], Tuple{Int8, Int8}[], Base.RefValue{Int8}(0), Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int8}(4, Int8[1, 1], Bool[0, 0, 0, 0], Tuple{Int8, Int8}[], Base.RefValue{Int8}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int8}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int}(6, Element{0.0}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        res = Fiber(Finch.DenseLevel(6, Element{0.0}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(6, Element{0.0}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int8} constructors" begin
        ref = Fiber(Dense{Int8}(6, Element{0.0}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        res = Fiber(Finch.DenseLevel{Int8}(6, Element{0.0}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int}(6, [1, 3], [2, 4], Element{0.0}([1.0, 1.0])))
        res = Fiber(Finch.SparseListLevel(6, [1, 3], [2, 4], Element{0.0}([1.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(6, [1, 3], [2, 4], Element{0.0}([1.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(6, [1, 3], [2, 4], Element{0.0}([1.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int8} constructors" begin
        ref = Fiber(SparseList{Int8}(6, [1, 3], Int8[2, 4], Element{0.0}([1.0, 1.0])))
        res = Fiber(Finch.SparseListLevel{Int8}(6, [1, 3], Int8[2, 4], Element{0.0}([1.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int}(6, [1, 3], Int8[2, 4], Element{0.0}([1.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseList{Int8}(6, Int8[1, 3], Int8[2, 4], Element{0.0}([1.0, 1.0])))
        res = Fiber(Finch.SparseListLevel{Int8, Int8}(6, Int8[1, 3], Int8[2, 4], Element{0.0}([1.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0}([1.0, 1.0])))
        res = Fiber(Finch.SparseVBLLevel(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0}([1.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0}([1.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0}([1.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int8} constructors" begin
        ref = Fiber(SparseVBL{Int8}(6, [1, 3], Int8[2, 4], [1, 2, 3], Element{0.0}([1.0, 1.0])))
        res = Fiber(Finch.SparseVBLLevel{Int8}(6, [1, 3], Int8[2, 4], [1, 2, 3], Element{0.0}([1.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int}(6, [1, 3], Int8[2, 4], [1, 2, 3], Element{0.0}([1.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseVBL{Int8}(6, Int8[1, 3], Int8[2, 4], Int8[1, 2, 3], Element{0.0}([1.0, 1.0])))
        res = Fiber(Finch.SparseVBLLevel{Int8, Int8}(6, Int8[1, 3], Int8[2, 4], Int8[1, 2, 3], Element{0.0}([1.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], [(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0}([0.0, 1.0])))
        res = Fiber(Finch.SparseBytemapLevel(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], [(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0}([0.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], [(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0}([0.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], [(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0}([0.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int8} constructors" begin
        ref = Fiber(SparseBytemap{Int8}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], Tuple{Int, Int8}[(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0}([0.0, 1.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int8}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], Tuple{Int, Int8}[(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0}([0.0, 1.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], Tuple{Int, Int8}[(1, 2), (1, 4)], Base.RefValue{Int}(2), Element{0.0}([0.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseBytemap{Int8}(6, Int8[1, 3], Bool[0, 1, 0, 1, 0, 0], Tuple{Int8, Int8}[(1, 2), (1, 4)], Base.RefValue{Int8}(2), Element{0.0}([0.0, 1.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int8}(6, Int8[1, 3], Bool[0, 1, 0, 1, 0, 0], Tuple{Int8, Int8}[(1, 2), (1, 4)], Base.RefValue{Int8}(2), Element{0.0}([0.0, 1.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int}(0, Element{0.0}(Float64[])))
        res = Fiber(Finch.DenseLevel(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int8} constructors" begin
        ref = Fiber(Dense{Int8}(0, Element{0.0}(Float64[])))
        res = Fiber(Finch.DenseLevel{Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int}(0, [1, 1], Int[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseListLevel(0, [1, 1], Int[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(0, [1, 1], Int[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(0, [1, 1], Int[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int8} constructors" begin
        ref = Fiber(SparseList{Int8}(0, [1, 1], Int8[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseListLevel{Int8}(0, [1, 1], Int8[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int}(0, [1, 1], Int8[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseList{Int8}(0, Int8[1, 1], Int8[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseListLevel{Int8, Int8}(0, Int8[1, 1], Int8[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int}(0, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseVBLLevel(0, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(0, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(0, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int8} constructors" begin
        ref = Fiber(SparseVBL{Int8}(0, [1, 1], Int8[], [1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseVBLLevel{Int8}(0, [1, 1], Int8[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int}(0, [1, 1], Int8[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseVBL{Int8}(0, Int8[1, 1], Int8[], Int8[1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseVBLLevel{Int8, Int8}(0, Int8[1, 1], Int8[], Int8[1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int}(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseBytemapLevel(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(0, [1, 1], Bool[], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int8} constructors" begin
        ref = Fiber(SparseBytemap{Int8}(0, [1, 1], Bool[], Tuple{Int, Int8}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseBytemapLevel{Int8}(0, [1, 1], Bool[], Tuple{Int, Int8}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int}(0, [1, 1], Bool[], Tuple{Int, Int8}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseBytemap{Int8}(0, Int8[1, 1], Bool[], Tuple{Int8, Int8}[], Base.RefValue{Int8}(0), Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int8}(0, Int8[1, 1], Bool[], Tuple{Int8, Int8}[], Base.RefValue{Int8}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int8}(0, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int}(4, Element{0.0}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.DenseLevel(4, Element{0.0}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(4, Element{0.0}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int8} constructors" begin
        ref = Fiber(Dense{Int8}(4, Element{0.0}([0.0, 0.0, 0.0, 0.0])))
        res = Fiber(Finch.DenseLevel{Int8}(4, Element{0.0}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int}(4, [1, 1], Int[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseListLevel(4, [1, 1], Int[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(4, [1, 1], Int[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(4, [1, 1], Int[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int8} constructors" begin
        ref = Fiber(SparseList{Int8}(4, [1, 1], Int8[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseListLevel{Int8}(4, [1, 1], Int8[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int}(4, [1, 1], Int8[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseList{Int8}(4, Int8[1, 1], Int8[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseListLevel{Int8, Int8}(4, Int8[1, 1], Int8[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int8}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int}(4, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseVBLLevel(4, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(4, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(4, [1, 1], Int[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int8} constructors" begin
        ref = Fiber(SparseVBL{Int8}(4, [1, 1], Int8[], [1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseVBLLevel{Int8}(4, [1, 1], Int8[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int}(4, [1, 1], Int8[], [1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseVBL{Int8}(4, Int8[1, 1], Int8[], Int8[1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseVBLLevel{Int8, Int8}(4, Int8[1, 1], Int8[], Int8[1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int8}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseBytemapLevel(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int8} constructors" begin
        ref = Fiber(SparseBytemap{Int8}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int8}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseBytemapLevel{Int8}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int8}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int}(4, [1, 1], Bool[0, 0, 0, 0], Tuple{Int, Int8}[], Base.RefValue{Int}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseBytemap{Int8}(4, Int8[1, 1], Bool[0, 0, 0, 0], Tuple{Int8, Int8}[], Base.RefValue{Int8}(0), Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int8}(4, Int8[1, 1], Bool[0, 0, 0, 0], Tuple{Int8, Int8}[], Base.RefValue{Int8}(0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int8}(4, Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int}(6, Element{0.0}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        res = Fiber(Finch.DenseLevel(6, Element{0.0}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int}(6, Element{0.0}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int8} constructors" begin
        ref = Fiber(Dense{Int8}(6, Element{0.0}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        res = Fiber(Finch.DenseLevel{Int8}(6, Element{0.0}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int}(6, [1, 5], [2, 3, 5, 6], Element{0.0}([2.0, 2.0, 3.0, 3.0])))
        res = Fiber(Finch.SparseListLevel(6, [1, 5], [2, 3, 5, 6], Element{0.0}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int}(6, [1, 5], [2, 3, 5, 6], Element{0.0}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int, Int}(6, [1, 5], [2, 3, 5, 6], Element{0.0}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int8} constructors" begin
        ref = Fiber(SparseList{Int8}(6, [1, 5], Int8[2, 3, 5, 6], Element{0.0}([2.0, 2.0, 3.0, 3.0])))
        res = Fiber(Finch.SparseListLevel{Int8}(6, [1, 5], Int8[2, 3, 5, 6], Element{0.0}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int8, Int}(6, [1, 5], Int8[2, 3, 5, 6], Element{0.0}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseList{Int8}(6, Int8[1, 5], Int8[2, 3, 5, 6], Element{0.0}([2.0, 2.0, 3.0, 3.0])))
        res = Fiber(Finch.SparseListLevel{Int8, Int8}(6, Int8[1, 5], Int8[2, 3, 5, 6], Element{0.0}([2.0, 2.0, 3.0, 3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0}([2.0, 2.0])))
        res = Fiber(Finch.SparseVBLLevel(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0}([2.0, 2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0}([2.0, 2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int, Int}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0}([2.0, 2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int8} constructors" begin
        ref = Fiber(SparseVBL{Int8}(6, [1, 3], Int8[3, 6], [1, 3, 5], Element{0.0}([2.0, 2.0])))
        res = Fiber(Finch.SparseVBLLevel{Int8}(6, [1, 3], Int8[3, 6], [1, 3, 5], Element{0.0}([2.0, 2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int8, Int}(6, [1, 3], Int8[3, 6], [1, 3, 5], Element{0.0}([2.0, 2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseVBL{Int8}(6, Int8[1, 3], Int8[3, 6], Int8[1, 3, 5], Element{0.0}([2.0, 2.0])))
        res = Fiber(Finch.SparseVBLLevel{Int8, Int8}(6, Int8[1, 3], Int8[3, 6], Int8[1, 3, 5], Element{0.0}([2.0, 2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{Int}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0}([0.0, 2.0, 2.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0}([0.0, 2.0, 2.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0}([0.0, 2.0, 2.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int, Int}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0}([0.0, 2.0, 2.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int8} constructors" begin
        ref = Fiber(SparseBytemap{Int8}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], Tuple{Int, Int8}[(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0}([0.0, 2.0, 2.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int8}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], Tuple{Int, Int8}[(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0}([0.0, 2.0, 2.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], Tuple{Int, Int8}[(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int}(4), Element{0.0}([0.0, 2.0, 2.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int8, Int8} constructors" begin
        ref = Fiber(SparseBytemap{Int8}(6, Int8[1, 5], Bool[0, 1, 1, 0, 1, 1], Tuple{Int8, Int8}[(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int8}(4), Element{0.0}([0.0, 2.0, 2.0, 0.0])))
        res = Fiber(Finch.SparseBytemapLevel{Int8, Int8}(6, Int8[1, 5], Bool[0, 1, 1, 0, 1, 1], Tuple{Int8, Int8}[(1, 2), (1, 3), (1, 5), (1, 6)], Base.RefValue{Int8}(4), Element{0.0}([0.0, 2.0, 2.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int}}((0,), (Int[], ), [1, 1], Element{false}(Bool[])))
        res = Fiber(Finch.SparseCooLevel{1}((0,), (Int[],), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((0,), (Int[],), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int8}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int8}}((0,), (Int8[], ), [1, 1], Element{false}(Bool[])))
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int8}}((0,), (Int8[],), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int8}}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int8}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((0,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int, Int}}((0, 0), (Int[], Int[], ), [1, 1], Element{false}(Bool[])))
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), (Int[], Int[]), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((0, 0), (Int[], Int[]), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int8, Int8}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int8, Int8}}((0, 0), (Int8[], Int8[], ), [1, 1], Element{false}(Bool[])))
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int8, Int8}}((0, 0), (Int8[], Int8[]), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int8, Int8}}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int8, Int8}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int, Int, Int}}((0, 0, 0), (Int[], Int[], Int[], ), [1, 1], Element{false}(Bool[])))
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), (Int[], Int[], Int[]), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), (Int[], Int[], Int[]), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), (Int8[], Int8[], Int8[], ), [1, 1], Element{false}(Bool[])))
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), (Int8[], Int8[], Int8[]), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int, Int, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((0, 0, 0), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}(Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int}}((4,), (Int[], ), [1, 1], Element{false}(Bool[])))
        res = Fiber(Finch.SparseCooLevel{1}((4,), (Int[],), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((4,), (Int[],), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int8}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int8}}((4,), (Int8[], ), [1, 1], Element{false}(Bool[])))
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int8}}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int, Int}}((2, 3), (Int[], Int[], ), [1, 1], Element{false}(Bool[])))
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), (Int[], Int[]), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((2, 3), (Int[], Int[]), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int8, Int8}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int8, Int8}}((2, 3), (Int8[], Int8[], ), [1, 1], Element{false}(Bool[])))
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int8, Int8}}((2, 3), (Int8[], Int8[]), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int8, Int8}}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int, Int, Int}}((2, 3, 2), (Int[], Int[], Int[], ), [1, 1], Element{false}(Bool[])))
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), (Int[], Int[], Int[]), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), (Int[], Int[], Int[]), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), (Int8[], Int8[], Int8[], ), [1, 1], Element{false}(Bool[])))
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), (Int8[], Int8[], Int8[]), [1, 1], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Element{false}(Bool[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Element{false}(Bool[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int}}((4,), ([2], ), [1, 2], Element{false}(Bool[1])))
        res = Fiber(Finch.SparseCooLevel{1}((4,), ([2],), [1, 2], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((4,), ([2],), [1, 2], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int8}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int8}}((4,), (Int8[2], ), [1, 2], Element{false}(Bool[1])))
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[2],), [1, 2], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false}(Bool[1])))
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8}}, Int}[(1, (2,)) => 1], Element{false}(Bool[1])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8}}, Int}[(1, (2,)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8}}, Int}[(1, (2,)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8}}, Int}[(1, (2,)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[(1, (2,)) => 1], Element{false}(Bool[1])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[(1, (2,)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[(1, (2,)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[(1, (2,)) => 1], Element{false}(Bool[1])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[(1, (2,)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int, Int}}((2, 3), ([2], [1], ), [1, 2], Element{false}(Bool[1])))
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), ([2], [1]), [1, 2], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((2, 3), ([2], [1]), [1, 2], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int8, Int8}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int8, Int8}}((2, 3), (Int8[2], Int8[1], ), [1, 2], Element{false}(Bool[1])))
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int8, Int8}}((2, 3), (Int8[2], Int8[1]), [1, 2], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false}(Bool[1])))
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[(1, (2, 1)) => 1], Element{false}(Bool[1])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[(1, (2, 1)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[(1, (2, 1)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[(1, (2, 1)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}((1, (2, 1)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[(1, (2, 1)) => 1], Element{false}(Bool[1])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}((1, (2, 1)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[(1, (2, 1)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}((1, (2, 1)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[(1, (2, 1)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}((1, (2, 1)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[(1, (2, 1)) => 1], Element{false}(Bool[1])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}((1, (2, 1)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[(1, (2, 1)) => 1], Element{false}(Bool[1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int, Int, Int}}((2, 3, 2), ([2, 3], [2, 2], [1, 2], ), [1, 3], Element{false}(Bool[1, 1])))
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), (Int8[2, 3], Int8[2, 2], Int8[1, 2], ), [1, 3], Element{false}(Bool[1, 1])))
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), (Int8[2, 3], Int8[2, 2], Int8[1, 2]), [1, 3], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int8[1, 3], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int8[1, 3], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int8[1, 3], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int8[1, 3], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int8[1, 3], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false}(Bool[1, 1])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int}}((0,), (Int[], ), [1, 1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseCooLevel{1}((0,), (Int[],), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((0,), (Int[],), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int8}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int8}}((0,), (Int8[], ), [1, 1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int8}}((0,), (Int8[],), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int8}}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int8}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((0,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((0,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int, Int}}((0, 0), (Int[], Int[], ), [1, 1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), (Int[], Int[]), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((0, 0), (Int[], Int[]), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int8, Int8}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int8, Int8}}((0, 0), (Int8[], Int8[], ), [1, 1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int8, Int8}}((0, 0), (Int8[], Int8[]), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int8, Int8}}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int8, Int8}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((0, 0), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int, Int, Int}}((0, 0, 0), (Int[], Int[], Int[], ), [1, 1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), (Int[], Int[], Int[]), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), (Int[], Int[], Int[]), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), (Int8[], Int8[], Int8[], ), [1, 1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), (Int8[], Int8[], Int8[]), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int, Int, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((0, 0, 0), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((0, 0, 0), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((0, 0, 0), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}(Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int}}((4,), (Int[], ), [1, 1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseCooLevel{1}((4,), (Int[],), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((4,), (Int[],), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int8}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int8}}((4,), (Int8[], ), [1, 1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int8}}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int, Int}}((2, 3), (Int[], Int[], ), [1, 1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), (Int[], Int[]), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((2, 3), (Int[], Int[]), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int8, Int8}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int8, Int8}}((2, 3), (Int8[], Int8[], ), [1, 1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int8, Int8}}((2, 3), (Int8[], Int8[]), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int8, Int8}}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int, Int, Int}}((2, 3, 2), (Int[], Int[], Int[], ), [1, 1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), (Int[], Int[], Int[]), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), (Int[], Int[], Int[]), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), (Int8[], Int8[], Int8[], ), [1, 1], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), (Int8[], Int8[], Int8[]), [1, 1], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int, Int, Int}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), [1, 1], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Int8[1, 1], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[], Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}(), Element{0.0}(Float64[])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int}}((4,), ([2], ), [1, 2], Element{0.0}([2.0])))
        res = Fiber(Finch.SparseCooLevel{1}((4,), ([2],), [1, 2], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int}}((4,), ([2],), [1, 2], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int8}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int8}}((4,), (Int8[2], ), [1, 2], Element{0.0}([2.0])))
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[2],), [1, 2], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int}}((4,), Dict{Tuple{Int, Tuple{Int}}, Int}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0}([2.0])))
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int}, Int, Dict{Tuple{Int, Tuple{Int}}, Int}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8}}, Int}[(1, (2,)) => 1], Element{0.0}([2.0])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8}}, Int}[(1, (2,)) => 1], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8}}, Int}[(1, (2,)) => 1], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int, Dict{Tuple{Int, Tuple{Int8}}, Int}}((4,), Dict{Tuple{Int, Tuple{Int8}}, Int}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8}}, Int}[(1, (2,)) => 1], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[(1, (2,)) => 1], Element{0.0}([2.0])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[(1, (2,)) => 1], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[(1, (2,)) => 1], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[(1, (2,)) => 1], Element{0.0}([2.0])))
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8}}, Int8}}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8}}, Int8}[(1, (2,)) => 1], Element{0.0}([2.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int, Int}}((2, 3), ([2], [1], ), [1, 2], Element{0.0}([3.0])))
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), ([2], [1]), [1, 2], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int, Int}}((2, 3), ([2], [1]), [1, 2], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int8, Int8}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int8, Int8}}((2, 3), (Int8[2], Int8[1], ), [1, 2], Element{0.0}([3.0])))
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int8, Int8}}((2, 3), (Int8[2], Int8[1]), [1, 2], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int, Int}}, Int}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0}([3.0])))
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int}}, Int}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[(1, (2, 1)) => 1], Element{0.0}([3.0])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[(1, (2, 1)) => 1], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[(1, (2, 1)) => 1], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}}((2, 3), Dict{Tuple{Int, Tuple{Int8, Int8}}, Int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int, Tuple{Int8, Int8}}, Int}[(1, (2, 1)) => 1], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}((1, (2, 1)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[(1, (2, 1)) => 1], Element{0.0}([3.0])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}((1, (2, 1)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[(1, (2, 1)) => 1], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}((1, (2, 1)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[(1, (2, 1)) => 1], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int8, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}((1, (2, 1)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[(1, (2, 1)) => 1], Element{0.0}([3.0])))
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}}((2, 3), Dict{Tuple{Int8, Tuple{Int8, Int8}}, Int8}((1, (2, 1)) => 1), Int8[1, 2], Pair{Tuple{Int8, Tuple{Int8, Int8}}, Int8}[(1, (2, 1)) => 1], Element{0.0}([3.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int, Int, Int}}((2, 3, 2), ([2, 3], [2, 2], [1, 2], ), [1, 3], Element{0.0}([4.0, 5.0])))
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), (Int8[2, 3], Int8[2, 2], Int8[1, 2], ), [1, 3], Element{0.0}([4.0, 5.0])))
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), (Int8[2, 3], Int8[2, 2], Int8[1, 2]), [1, 3], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int, Int, Int}, Int, Dict{Tuple{Int, Tuple{Int, Int, Int}}, Int}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int, Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}}((2, 3, 2), Dict{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int, Tuple{Int8, Int8, Int8}}, Int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int8[1, 3], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int8[1, 3], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int8[1, 3], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int8, Int8, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int8[1, 3], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int8, Int8, Int8}, Int8, Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}}((2, 3, 2), Dict{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int8[1, 3], Pair{Tuple{Int8, Tuple{Int8, Int8, Int8}}, Int8}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0}([4.0, 5.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int}(0, [1, 1], Int[], Float64[]))
        res = Fiber(Finch.RepeatRLELevel{0.0}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(0, [1, 1], Int8[], Float64[]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8}(0, [1, 1], Int8[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int}(0, [1, 1], Int8[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int, Float64}(0, [1, 1], Int8[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8, Int8} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(0, Int8[1, 1], Int8[], Float64[]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8}(0, Int8[1, 1], Int8[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Float64}(0, Int8[1, 1], Int8[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8, Int8, Any} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(0, Int8[1, 1], Int8[], Any[]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Any}(0, Int8[1, 1], Int8[], Any[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Any}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int}(0, [1, 1], Int[], Float64[]))
        res = Fiber(Finch.RepeatRLELevel(0.0, 0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel(0.0, 0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel(0.0))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(4, [1, 2], Int8[4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8}(4, [1, 2], Int8[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int}(4, [1, 2], Int8[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int, Float64}(4, [1, 2], Int8[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8, Int8} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(4, Int8[1, 2], Int8[4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8}(4, Int8[1, 2], Int8[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Float64}(4, Int8[1, 2], Int8[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8, Int8, Any} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(4, Int8[1, 2], Int8[4], Any[0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Any}(4, Int8[1, 2], Int8[4], Any[0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Any}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel(0.0, 4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel(0.0, 4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int}(6, [1, 3], [1, 6], [0.0, 1.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0}(6, [1, 3], [1, 6], [0.0, 1.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(6, [1, 3], [1, 6], [0.0, 1.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(6, [1, 3], [1, 6], [0.0, 1.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(6, [1, 3], [1, 6], [0.0, 1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(6, [1, 3], Int8[1, 6], [0.0, 1.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8}(6, [1, 3], Int8[1, 6], [0.0, 1.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int}(6, [1, 3], Int8[1, 6], [0.0, 1.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int, Float64}(6, [1, 3], Int8[1, 6], [0.0, 1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8, Int8} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(6, Int8[1, 3], Int8[1, 6], [0.0, 1.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8}(6, Int8[1, 3], Int8[1, 6], [0.0, 1.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Float64}(6, Int8[1, 3], Int8[1, 6], [0.0, 1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8, Int8, Any} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(6, Int8[1, 3], Int8[1, 6], Any[0.0, 1.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Any}(6, Int8[1, 3], Int8[1, 6], Any[0.0, 1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int}(6, [1, 3], [1, 6], [0.0, 1.0]))
        res = Fiber(Finch.RepeatRLELevel(0.0, 6, [1, 3], [1, 6], [0.0, 1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int}(0, [1, 1], Int[], Float64[]))
        res = Fiber(Finch.RepeatRLELevel{0.0}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(0, [1, 1], Int8[], Float64[]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8}(0, [1, 1], Int8[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int}(0, [1, 1], Int8[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int, Float64}(0, [1, 1], Int8[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8, Int8} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(0, Int8[1, 1], Int8[], Float64[]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8}(0, Int8[1, 1], Int8[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Float64}(0, Int8[1, 1], Int8[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Float64}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8, Int8, Any} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(0, Int8[1, 1], Int8[], Any[]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Any}(0, Int8[1, 1], Int8[], Any[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Any}(0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int}(0, [1, 1], Int[], Float64[]))
        res = Fiber(Finch.RepeatRLELevel(0.0, 0, [1, 1], Int[], Float64[]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel(0.0, 0))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel(0.0))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(4, [1, 2], Int8[4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8}(4, [1, 2], Int8[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int}(4, [1, 2], Int8[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int, Float64}(4, [1, 2], Int8[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8, Int8} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(4, Int8[1, 2], Int8[4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8}(4, Int8[1, 2], Int8[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8}(4))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Float64}(4, Int8[1, 2], Int8[4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Float64}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8, Int8, Any} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(4, Int8[1, 2], Int8[4], Any[0.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Any}(4, Int8[1, 2], Int8[4], Any[0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Any}(4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int}(4, [1, 2], [4], [0.0]))
        res = Fiber(Finch.RepeatRLELevel(0.0, 4, [1, 2], [4], [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel(0.0, 4))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int}(6, [1, 4], [1, 4, 6], [0.0, 2.0, 3.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0}(6, [1, 4], [1, 4, 6], [0.0, 2.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int}(6, [1, 4], [1, 4, 6], [0.0, 2.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int}(6, [1, 4], [1, 4, 6], [0.0, 2.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int, Int, Float64}(6, [1, 4], [1, 4, 6], [0.0, 2.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(6, [1, 4], Int8[1, 4, 6], [0.0, 2.0, 3.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8}(6, [1, 4], Int8[1, 4, 6], [0.0, 2.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int}(6, [1, 4], Int8[1, 4, 6], [0.0, 2.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int, Float64}(6, [1, 4], Int8[1, 4, 6], [0.0, 2.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8, Int8} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(6, Int8[1, 4], Int8[1, 4, 6], [0.0, 2.0, 3.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8}(6, Int8[1, 4], Int8[1, 4, 6], [0.0, 2.0, 3.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Float64}(6, Int8[1, 4], Int8[1, 4, 6], [0.0, 2.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel{0.0, Int8, Int8, Any} constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int8}(6, Int8[1, 4], Int8[1, 4, 6], Any[0.0, 2.0, 3.0]))
        res = Fiber(Finch.RepeatRLELevel{0.0, Int8, Int8, Any}(6, Int8[1, 4], Int8[1, 4, 6], Any[0.0, 2.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.RepeatRLELevel constructors" begin
        ref = Fiber(RepeatRLE{0.0, Int}(6, [1, 4], [1, 4, 6], [0.0, 2.0, 3.0]))
        res = Fiber(Finch.RepeatRLELevel(0.0, 6, [1, 4], [1, 4, 6], [0.0, 2.0, 3.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0}([0.0]))
        res = Fiber(Finch.ElementLevel{0.0}([0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0}(Any[0.0]))
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0}([0.0]))
        res = Fiber(Finch.ElementLevel(0.0, [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel(0.0))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0}([1.0]))
        res = Fiber(Finch.ElementLevel{0.0}([1.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0}(Any[1.0]))
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0}([1.0]))
        res = Fiber(Finch.ElementLevel(0.0, [1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0}([0.0]))
        res = Fiber(Finch.ElementLevel{0.0}([0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0}(Any[0.0]))
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0}([0.0]))
        res = Fiber(Finch.ElementLevel(0.0, [0.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel(0.0))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0}([1.0]))
        res = Fiber(Finch.ElementLevel{0.0}([1.0]))
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0}(Any[1.0]))
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[1.0]))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0}([1.0]))
        res = Fiber(Finch.ElementLevel(0.0, [1.0]))
        @test isstructequal(res, ref)
    end
end
